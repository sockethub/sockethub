<!doctype html>
<html>
  <head>
    <title>Sockethub Example IRC Chat</title>
    <style>
      * { margin: 0; padding: 0; box-sizing: border-box; }
      body { font: 0.8em Helvetica, Arial; }
      h3 { color: #6B6767; font-size: 0.8em; margin-bottom: 1em; }
      form#chat { background: #000; padding: 0.3em; position: fixed; bottom: 0; width: 100%; }
      input { border: 0; padding: 5%; }
      button { width: 20%; background: rgb(130, 224, 255); border: none; padding: 5%; }
      button.invis { background-color: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0);}
      button:hover { cursor: pointer; }
      .messageInput { width: 80%; }
      #messages { list-style-type: none; margin: 0; padding: 0; }
      #messages li { padding: 0.1em 1%; }
      #messages li:nth-child(odd) { background: #eee; }
      .modal { position: fixed; top: 15%; left: 5%; width: 90%;
               line-height: 1em; padding: 3% 0 3%;
               background-color: #f1c40f; text-align: center;
               z-index: 10; outline: 9999px solid rgba(0,0,0,0.5); }
      @media only screen and (max-width: 1050px) {
        body { font: 1em Helvetica, Arial; }
        h3 { color: #6B6767; font-size: 1em; margin-bottom: 1.5em; }
        input { border: 0; padding: 3%; width: 70%; font-size: 1em; }
        button { width: 20%; border: none; padding: 3%; font-size: 1em; }
      }
      @media only screen and (max-width: 5000px) {
        body { font: 0.9em Helvetica, Arial; }
        h3 { color: #6B6767; font-size: 1.2em; margin-bottom: 1.5em; }
        .modal input { border: 0; padding: 2%; width: 80%; font-size: 0.8em; }
        .modal button { width: 10%; border: none; padding: 2%; font-size: 0.8em; }
        input { padding: 1%; }
        button { padding: 1%; width: 10%; }
        .messageInput { width: 90%; }
      }
    </style>
  </head>
  <body>
    <div class="modal">
      <h3>Click `Join` to connect and join the IRC channel.</h3>
      <form id="intro" action="">
        <input id="n" autocomplete="off" value="sh-<%= randToken %>"><button class="invis" disabled>nick</button>
        <input id="j" autocomplete="off" value="" disabled><button id="join">Join</button>
      </form>
    </div>
    <ul id="messages"></ul>
    <form id="chat" action="">
      <input id="m" autocomplete="off" class="messageInput" disabled><button id="send" disabled>Send</button>
    </form>

    <script src="<%= address %>jquery.js"></script>
    <script src="<%= address %>sockethub/socket.io.js"></script>
    <script src="<%= address %>activity-streams.min.js"></script>
    <script src="<%= address %>sockethub-client.js"></script>
    <script src="<%= address %>examples/shared.js"></script>
    <script>
      debug = function (msg, obj) { console.log(msg, obj); };
      const examplesShared = new ExamplesShared();
      const ircServer = 'irc.freenode.net';
      localStorage.debug = 'sockethub:*';
      const sc = new SockethubClient(io('<%= address %>', { path: '/sockethub' }));
      const channel = 'sockethub-test';
      let nick = 'sh-<%= randToken %>';

      $('#j').val('#' + channel);

      function __normalizeMessage(msg) {
        function __normalizeTargetFromContent(string) {
          const postCMD = msg.object.content.substr(string.length + 1) + ' ';
          const target = postCMD.substr(0, postCMD.indexOf(' '));
          if (target.indexOf('#') === 0) {
            msg.target = 'irc://' + ircServer + '/' + target;
            sc.ActivityStreams.Object.create({
              '@id': 'irc://' + ircServer + '/' + target,
              '@type': "room",
              displayName: target
            });
          } else {
            msg.target = 'irc://' + target + '@' + ircServer;
            sc.ActivityStreams.Object.create({
              '@id': 'irc://' + target + '@' + ircServer,
              '@type': "person",
              displayName: target
            });
          }
        }

        if ((typeof msg.object === 'object') &&
            (typeof msg.object.content === 'string')) {

          if (msg.object.content.indexOf('/me') === 0) {
            // show completed emotes from us
            // rewrite as object to what the incoming objects should look like
            msg.object['@type'] = 'me';
            msg.object.content = msg.object.content.substr(4);
          } else if (msg.object.content.indexOf('/nick') === 0) {
            msg.object['@type'] = 'address';
            msg['@type'] = 'update';
            __normalizeTargetFromContent('/nick');
            delete msg.object.content;
          } else if (msg.object.content.indexOf('/notice') === 0) {
            // show completed emotes from us
            // rewrite as object to what the incoming objects should look like
            msg.object['@type'] = 'notice';
            __normalizeTargetFromContent('/notice');
            msg.object.content = msg.object.content.substr(8 + object.target.displayName.length + 1);
          }

        }
        return msg;
      }

      // creates an ActivityStreams object for our actor (us)
      function __updateActor(_nick) {
        debug(`update nick ${nick} to ${_nick}`);
        // our irc user info
        nick = _nick; // set global nick
        sc.ActivityStreams.Object.create({
          '@id': 'irc://' + nick + '@' + ircServer,
          '@type': "person",
          displayName: nick,
          url: "http://sockethub.org",
          image: {
            url: "http://example.org/image.jpg",
            mediaType: "image/jpeg",
            width: 250,
            height: 250
          }
        });
        __updateCredentials();
      }

      function __updateCredentials() {
        // sending irc credentials to sockethub server
        const credentials = {
          actor: 'irc://' + nick + '@' + ircServer,
          context: 'irc',
          object: {
            '@type': 'credentials',
            nick: nick,
            server: ircServer,
            port: 6667,
            secure: false
          }
        };
        debug('sending credentials: ', credentials);
        sc.socket.emit('credentials', credentials);
      }

      // errors
      sc.socket.on('failed', function (msg) {
        debug('failed ', msg);
        $('#messages').append($('<li>').text(msg.error));
      });

      sc.socket.on('completed', function (msg) {
        msg = sc.ActivityStreams.Stream(msg);
        debug('completed ', msg);

        msg = __normalizeMessage(msg);
        if ((typeof msg.object === 'object') &&
            (typeof msg.object.content === 'string')) {
          examplesShared.processIncomingMessage(msg);
        } else if ((msg['@type'] === 'update') &&
                   (msg.object['@type'] === 'address') &&
                   (msg.actor.displayName === nick)) {
          // our nick has been updated
          __updateActor(msg.target.displayName);
          examplesShared.processIncomingMessage(msg);
        } else if (msg['@type'] === 'join') {
          $('.modal').css('display', 'none');
          $('input#m').prop('disabled', false);
          $('button#send').prop('disabled', false);
        } else {
          debug('nothing to do for completed message ', msg)
        }
      });

      // handle incoming messages from the sockethub server
      sc.socket.on('message', (msg) => {
        msg = sc.ActivityStreams.Stream(msg);
        debug('processing message: ', msg);
        examplesShared.processIncomingMessage(msg);
      });

      // handler for user input, emit messages to sockethub server
      $('#chat').submit(function () {
        let msg = {
          '@type': 'send',
          context: 'irc',
          actor: 'irc://' + nick + '@' + ircServer,
          object: {
            '@type': 'message',
            content: $('#m').val()
          },
          target: 'irc://' + ircServer + '/' + channel
        };

        msg = __normalizeMessage(msg);
        debug('sending message: ', msg);
        sc.socket.emit('message', msg);
        $('#m').val('');
        return false;
      });

      // handler for user input, emit messages to sockethub server
      $('#join').click(function () {
        nick = $('#n').val();

        // the irc chatroom we're connecting to
        sc.ActivityStreams.Object.create({
          '@id': 'irc://' + ircServer + '/' + channel,
          '@type': "room",
          displayName: '#' + channel
        });
        __updateActor(nick);
        debug('socket id: ', sc.socket.id);

        const msg = {
          '@type': 'join',
          context: 'irc',
          actor: 'irc://' + nick + '@' + ircServer,
          target: 'irc://' + ircServer + '/' + channel
        };

        debug('sending message: ', msg);
        sc.socket.emit('message', msg);
        return false;
      });
    </script>
  </body>
</html>