<!doctype html>
<html>
  <head>
    <title>Sockethub Example XMPP Chat</title>
    <style>
      * { margin: 0; padding: 0; box-sizing: border-box; }
      body { font: 0.8em Helvetica, Arial; }
      h3 { color: #6B6767; font-size: 0.8em; margin-bottom: 1em; }
      form#chat { background: #000; padding: 0.3em; position: fixed; bottom: 0; width: 100%; }
      input { border: 0; padding: 5%; }
      button { width: 20%; background: rgb(130, 224, 255); border: none; padding: 5%; }
      button.invis { background-color: rgba(0, 0, 0, 0); color: rgba(0, 0, 0, 0);}
      button:hover { cursor: pointer; }
      .messageInput { width: 80%; }
      #messages { list-style-type: none; margin: 0; padding: 0; }
      #messages li { padding: 0.1em 1%; }
      #messages li:nth-child(odd) { background: #eee; }
      .modal { position: fixed; top: 15%; left: 5%; width: 90%;
               line-height: 1em; padding: 3% 0 3%;
               background-color: #f1c40f; text-align: center;
               z-index: 10; outline: 9999px solid rgba(0,0,0,0.5); }
      @media only screen and (max-width: 1050px) {
        body { font: 1em Helvetica, Arial; }
        h3 { color: #6B6767; font-size: 1em; margin-bottom: 1.5em; }
        input { border: 0; padding: 3%; width: 70%; font-size: 1em; }
        button { width: 20%; border: none; padding: 3%; font-size: 1em; }
      }
      @media only screen and (max-width: 5000px) {
        body { font: 0.9em Helvetica, Arial; }
        h3 { color: #6B6767; font-size: 1.2em; margin-bottom: 1.5em; }
        .modal input { border: 0; padding: 2%; width: 80%; font-size: 0.8em; }
        .modal button { width: 10%; border: none; padding: 2%; font-size: 0.8em; }
        input { padding: 1%; }
        button { padding: 1%; width: 10%; }
        .messageInput { width: 90%; }
      }
    </style>
  </head>
  <body>
    <div class="modal">
      <h3>Click `Join` to connect to the XMPP server.</h3>
      <form id="intro" action="">
        <input id="userAddress" autocomplete="off" value="username@jabber.org"><button class="invis" disabled>&nbsp;</button>
        <input id="password" type="password" autocomplete="off" value="password"><button class="invis" disabled>&nbsp;</button>
        <input id="resource" autocomplete="off" value="SockethubExample" disabled><button id="join">Join</button>
      </form>
    </div>

    <ul id="messages"></ul>
    <form id="chat" action="">
      <input id="m" autocomplete="off" class="messageInput" disabled><button id="send" disabled>Send</button>
    </form>

    <script src="<%= address %>jquery.js"></script>
    <script src="<%= address %>socket.io.js"></script>
    <script src="<%= address %>sockethub-client.js"></script>
    <script src="<%= address %>examples/shared.js"></script>

    <script>
      debug = function (msg, obj) { console.log(msg, obj); };
      let counter = 0;
      const examplesShared = new ExamplesShared();
      localStorage.debug = 'sockethub:*';
      let config = {
        type: 'credentials',
        userAddress: 'username@jabber.org',
        password: '123456',
        resource: 'Home'
      };
      let actorString = '';

      const sc = new SockethubClient(io('<%= address %>', { path: '/sockethub' }));

      // creates an ActivityStreams object for our actor (us)
      function __updateActor(username) {
        console.log('updating actor object for: ' + username);
        // our xmpp user info
        config.userAddress = username; // set global userAddress
        actorString = config.userAddress + '/' + config.resource;
        const asObject = {
          id: actorString,
          type: "person",
          name: new URL('http://' + username).username,
          url: "http://sockethub.org",
          image: {
            url: "http://example.org/image.jpg",
            mediaType: "image/jpeg",
            width: 250,
            height: 250
          }
        };
        console.log('creating activity stream object ', asObject);
        sc.ActivityStreams.Object.create(asObject);
      }

      function handleMessage(text, origObject) {
        return (msg) => {
          msg = msg || origObject;
          console.log(text);
          if (msg.error) {
            debug('error: ', msg);
            console.error(msg.error);
          } else if (msg['type'] === 'connect') {
            $('.modal').css('display', 'none');
          } else if (msg['type'] === 'join') {
            $('input#m').prop('disabled', false);
            $('button#send').prop('disabled', false);
          } else {
            examplesShared.processIncomingMessage(msg);
          }
        };
      }
      // handle incoming messages from the Sockethub server
      sc.socket.on('message', handleMessage("incoming message"));

      $('.actor').click(function (e) {
        e.preventDefault();
        console.log('e: ', e);
      });

      // handler for user input, emit messages to Sockethub server
      $('#chat').submit(function (e) {
        e.preventDefault();
        const input = $('#m').val();
        let [targetId, text_message] = input.split(':');

        if (!text_message) {
          text_message = targetId;
          targetId = undefined;
        }

        let target = {
          id: 'kosmos-random@kosmos.chat',
          type: 'room'
        }
        if (targetId) {
          target = {
            id: targetId,
            type: 'room'
          }
        }

        const msg = {
          type: 'send',
          context: 'xmpp',
          actor: actorString,
          object: {
            type: 'message',
            content: text_message
          },
          target: target
        };

        debug('sending message: ', msg);
        sc.socket.emit('message', msg, handleMessage('callback from sent message', msg));
        $('#m').val('');
        return false;
      });

      // handler for user input, emit messages to Sockethub server
      $('#join').click(function (e) {
        e.preventDefault();
        config.userAddress = $('#userAddress').val();
        config.password = $('#password').val();
        config.resource = $('#resource').val();

        __updateActor(config.userAddress);

        setTimeout(function () {
          // sending irc credentials to Sockethub server
          const credentials = {
            actor: actorString,
            type: 'credentials',
            context: 'xmpp',
            object: config
          };
          debug('sending credentials: ', credentials);
          sc.socket.emit('credentials', credentials, (err) => {
            if (err) {
              console.error('failed to create credentials: ', err);
            } else {
              console.log('completed credentials');
            }
          });

          const connectMsg = {
            type: 'connect',
            context: 'xmpp',
            actor: actorString,
            object: {
              type: 'message',
              content: `debug:${++counter}`
            }
          };
          debug('sending connect message: ', connectMsg);
          sc.socket.emit('message', connectMsg, handleMessage('callback from connect', msg));

          const joinMsg = {
            type: 'join',
            context: 'xmpp',
            actor: actorString,
            target: {
              type: 'room',
              id: 'kosmos-random@kosmos.chat'
            },
            object: {
              type: 'message',
              content: `debug:${counter}`
            }
          };
          debug('sending join message: ', joinMsg);
          sc.socket.emit('message', joinMsg, handleMessage('callback from join'));
        }, 100);
        return false;
      });
    </script>
  </body>
</html>
